#version 450 core

struct voxel
{
  uint color; //RGBA8 alpha==0 means empty
};

struct camera
{
	vec3 pos, view, up, right;
};

struct ray
{
  vec3 pos, dir;
};

struct aabb
{
  vec3 min, max;
};

struct intersection
{
	float t;
};

//uniforms
uniform float time; //time in seconds
uniform vec4 mouse; //(xy) mouse pos in pixels, (zw) clicks
uniform vec2 resolution; //screen resolution in pixels
uniform vec2 inv_resolution; // 1/resolution
uniform float aspect; // resoltion.y / resolution.x
uniform vec3 sky_color = vec3( 0.678, 0.874, 1.0 );
uniform vec3 world_size; //32^3
uniform vec3 voxel_size; //1^3
uniform camera cam;

layout(std430) buffer voxel_data
{
  voxel voxels[32*32*32];
} vd;

in cross_shader_data
{
  vec2 tex_coord;
} i;

out vec4 color;

//supersampling positions
uniform vec3 pos00 = vec3( 0.25, 0.25, 0 );
uniform vec3 pos10 = vec3( 0.75, 0.25, 0 );
uniform vec3 pos01 = vec3( 0.25, 0.75, 0 );
uniform vec3 pos11 = vec3( 0.75, 0.75, 0 );

#ifndef EPSILON
#define EPSILON 0.001f
#endif

#ifndef FLT_MAX
#define FLT_MAX 3.402823466e+38
#endif

#define INVALID (FLT_MAX)

vec4 get_voxel_color( voxel v )
{
  vec4 r;
  r.x = (v.color >> 24) & 0xff;
  r.y = (v.color >> 16) & 0xff;
  r.z = (v.color >> 8 ) & 0xff;
  r.w = v.color & 0xff;

  return r / 255.0f;
}

float seed = 0.0;
float rand()
{
  vec2 uv = gl_FragCoord.xy * inv_resolution;
  float fixedSeed = abs(seed++) + 1.0 + time;
  float x = dot(uv, vec2(12.9898,78.233) * fixedSeed);
  return fract(sin(x) * 43758.5453);
}

voxel get_voxel( ivec3 p )
{
  uint address = p.z * 32 * 32 + p.y * 32 + p.x;
  return vd.voxels[address];
}

intersection intersect_aabb_ray( in aabb ab, in ray r )
{
  vec3 invR;

  // compute intersection of ray with all six bbox planes
  //in release mode we dgaf about div by zero
  invR = 1.0f / r.dir;

	vec3 tbot = invR * (ab.min - r.pos);
	vec3 ttop = invR * (ab.max - r.pos);

	// re-order intersections to find smallest and largest on each axis
	vec3 tmin = min(ttop, tbot);
	vec3 tmax = max(ttop, tbot);

	// find the largest tmin and the smallest tmax
	float largest_tmin = max(max(tmin.x, tmin.y), max(tmin.x, tmin.z));
	float smallest_tmax = min(min(tmax.x, tmax.y), min(tmax.x, tmax.z));

	intersection i;
  i.t = smallest_tmax > largest_tmin ? (largest_tmin >= 0 ? largest_tmin : smallest_tmax) : INVALID;

	return i;
}

vec3 trace( in ray rr )
{
  /**/
  ray r = rr;
  //DDA Voxel Raycasting

  //place ray's origin into the volume if possible
  vec3 XYZ = floor(r.pos);

  if( XYZ.x < 0 || XYZ.x >= 32 ||
      XYZ.y < 0 || XYZ.y >= 32 ||
      XYZ.z < 0 || XYZ.z >= 32 )
  {
    //if pos is outside the volume, find the intersection

    aabb voxel_aabb;
    voxel_aabb.min = vec3(0);
    voxel_aabb.max = world_size;

    intersection i = intersect_aabb_ray(voxel_aabb, r);

    if( i.t != INVALID )
    {
      r.pos = r.pos + r.dir * (i.t + EPSILON);
      XYZ = floor(r.pos); //recalculate map pos
      XYZ = clamp( XYZ, 0, 31 ); //make sure it's a valid position
    }
    else
    {
      //no intersection
      return vec3(-2);
    }
  }

  //DDA algorithm (by Andrew Woo)
  vec3 stepXYZ;
  vec3 deltaXYZ, nextXYZ;

  for( int c = 0; c < 3; ++c )
  {
    stepXYZ[c] = r.dir[c] < 0 ? -1 : 1;
  }

  //in release mode we dgaf about div by zero
  deltaXYZ = stepXYZ / r.dir;
  nextXYZ = -stepXYZ * (r.pos - XYZ) * deltaXYZ + max(stepXYZ, 0) * deltaXYZ;

  voxel current;
  vec3 mask;

  while(XYZ.x < 32 &&
        XYZ.y < 32 &&
        XYZ.z < 32 &&
        XYZ.x >= 0 &&
        XYZ.y >= 0 &&
        XYZ.z >= 0 )
  {
    current = get_voxel( ivec3( XYZ.x, XYZ.y, XYZ.z ) );
    if( get_voxel_color( current ).w > 0 )
    {
      return XYZ; //voxel found!
    }

    /*
    vec3 mask0 = step(nextXYZ.xyz, nextXYZ.yzx);
    vec3 mask1 = step(nextXYZ.xyz, nextXYZ.zxy);
    mask = mask0 * mask1; //which coordinate has the smallest value?
    */

    int c = 0;
	  for (int d = 1; d < 3; ++d)
	  {
		  if (nextXYZ[c] > nextXYZ[d])
			  c = d;
	  }

    mask = vec3(0);
	  mask[c] = 1;

    //update next
    nextXYZ += mask * deltaXYZ;
    //move into that direction
    XYZ += mask * stepXYZ;
  }

  return vec3(-1); //couldn't find a non-empty voxel
  /**/
}

vec4 calculate_pixel( in vec3 pix_pos )
{
  //2x2 near plane, 90 degrees vertical fov
  vec3 plane_pos = pix_pos * vec3( inv_resolution, 1 ) * 2 - vec3( 1, 1, 0 );
  plane_pos.y *= aspect;

  ray r;
  r.pos = cam.pos + cam.view + cam.right * plane_pos.x + cam.up * plane_pos.y;
  r.dir = normalize(r.pos - cam.pos);

  vec3 pos = trace( r );

  if( pos.x > -1 ) //if found voxel
  {
    voxel current = get_voxel( ivec3( pos.x, pos.y, pos.z ) );
    vec4 color = get_voxel_color( current );

    float sum = 0;

    /**/
    aabb current_aabb;
    current_aabb.min = pos;
    current_aabb.max = pos + vec3(1);

    intersection i = intersect_aabb_ray( current_aabb, r );

    //place ray origin slightly above the surface
    vec3 int_point = r.pos + r.dir * ( i.t - 0.001 );

    //calculate AO (doesn't really look correct, but at least shows structural details, so don't care)
    int samples = 8;
    for( int c = 0; c < samples; ++c )
    {
      vec3 dir = normalize( vec3( rand(), rand(), rand() ) * 2 - 1 );
      float coeff = -sign( dot( dir, r.dir ) ); //sample along a hemisphere (would need surface normal, but this should be ok too)

      ray box_ray;
      box_ray.pos = int_point;
      box_ray.dir = dir * (coeff != 0 ? coeff : 1); //sign can be 0

      vec3 pos = trace( box_ray );

      sum += float(pos.x < 0);
    }

    return vec4(sum / samples);
    /**/

    return vec4(1);
  }
  else
  {
    //debugging colors
    if( pos.x > -2 )
    {
      return vec4(0); //no hit
    }
    else
    {
      return vec4(0.5);
    }
  }
}

void main()
{
  /**/
  //supersampling
  color = ( calculate_pixel( vec3( gl_FragCoord.xy, 0.0 ) + pos00 ) +
	calculate_pixel( vec3( gl_FragCoord.xy, 0.0 ) + pos01 ) +
	calculate_pixel( vec3( gl_FragCoord.xy, 0.0 ) + pos10 ) +
	calculate_pixel( vec3( gl_FragCoord.xy, 0.0 ) + pos11 ) ) * 0.25;
  /**/

  //vec4 color = calculate_pixel( vec3( gl_FragCoord.xy, 0 ) );

  //write_backbuffer( gl_FragCoord, color );
  //color = vec4( rand(), rand(), rand(), 1 ) * 0.5 + 0.5;
}
